{
  "compilerOptions": {
    /* 이 파일에 대해 더 자세히 알고 싶다면 https://aka.ms/tsconfig 를 방문해보세요 */

    /* 프로젝트 기본 설정 */
    // "incremental": true,                              /* 다음 빌드를 더 빠르게 하기 위해 빌드 정보를 저장해둡니다 */
    // "composite": true,                                /* 여러 프로젝트를 서로 연결해서 사용할 수 있게 해줍니다 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 빌드 정보를 저장할 파일의 위치를 정합니다 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 프로젝트 간 참조할 때 원본 파일 대신 변환된 파일을 사용하게 합니다 */
    // "disableSolutionSearching": true,                 /* 코드 수정할 때 다른 프로젝트까지 검사하지 않게 합니다 */
    // "disableReferencedProjectLoad": true,             /* TypeScript가 한 번에 처리하는 프로젝트 수를 줄입니다 */

    /* 자바스크립트 버전과 문법 설정 */
    "target": "es2022",                                  /* 어떤 버전의 자바스크립트로 변환할지 정합니다 */
    // "lib": [],                                        /* 사용할 자바스크립트 기능들을 선택합니다 */
    // "jsx": "preserve",                                /* React 같은 JSX 코드를 어떻게 변환할지 정합니다 */
    // "libReplacement": true,                           /* 기본 라이브러리를 다른 것으로 바꿀 수 있게 합니다 */
    // "experimentalDecorators": true,                   /* 데코레이터라는 특별한 문법 기능을 사용할 수 있게 합니다 */
    // "emitDecoratorMetadata": true,                    /* 데코레이터에 대한 추가 정보를 코드에 넣어줍니다 */
    // "jsxFactory": "",                                 /* React에서 createElement 같은 JSX 변환 함수를 지정합니다 */
    // "jsxFragmentFactory": "",                         /* React에서 Fragment 같은 JSX 조각 변환 함수를 지정합니다 */
    // "jsxImportSource": "",                            /* JSX 변환에 사용할 패키지를 지정합니다 */
    // "reactNamespace": "",                             /* React JSX 변환시 사용할 객체 이름을 지정합니다 */
    // "noLib": true,                                    /* 기본 타입 정의 파일을 사용하지 않습니다 */
    // "useDefineForClassFields": true,                  /* 클래스 필드를 최신 방식으로 처리합니다 */
    // "moduleDetection": "auto",                        /* 파일을 모듈로 처리할지 자동으로 결정합니다 */

    /* 모듈 관련 설정 */
    "module": "es2022",                                  /* 코드를 어떤 방식으로 나눠서 관리할지 정합니다 */
    "rootDir": "./",                                     /* 프로젝트의 시작 폴더를 지정합니다 */
    // "moduleResolution": "node10",                     /* 모듈을 찾는 방식을 지정합니다 */
    // "baseUrl": "./",                                  /* 모듈 경로의 기준 폴더를 지정합니다 */
    // "paths": {},                                      /* 모듈 경로를 다른 위치로 바꿔서 사용할 수 있게 합니다 */
    // "rootDirs": [],                                   /* 여러 폴더를 하나의 뿌리 폴더처럼 사용할 수 있게 합니다 */
    // "typeRoots": [],                                  /* 타입 정의 파일을 찾을 폴더들을 지정합니다 */
    // "types": [],                                      /* 사용할 타입 정의 패키지들을 지정합니다 */
    // "allowUmdGlobalAccess": true,                     /* 전역 변수처럼 UMD 모듈을 사용할 수 있게 합니다 */
    // "moduleSuffixes": [],                             /* 모듈 파일을 찾을 때 확인할 파일 확장자를 지정합니다 */
    // "allowImportingTsExtensions": true,               /* .ts 확장자로 된 파일을 직접 가져올 수 있게 합니다 */
    // "rewriteRelativeImportExtensions": true,          /* 상대 경로의 .ts, .tsx, .mts, .cts 확장자를 자바스크립트 확장자로 바꿔줍니다 */
    // "resolvePackageJsonExports": true,                /* package.json의 exports 필드를 사용해 모듈을 찾습니다 */
    // "resolvePackageJsonImports": true,                /* package.json의 imports 필드를 사용해 모듈을 찾습니다 */
    // "customConditions": [],                           /* 모듈을 찾을 때 사용할 추가 조건을 지정합니다 */
    // "noUncheckedSideEffectImports": true,             /* 모듈 가져오기의 부작용을 검사합니다 */
    // "resolveJsonModule": true,                        /* JSON 파일을 모듈처럼 가져올 수 있게 합니다 */
    // "allowArbitraryExtensions": true,                 /* 타입 정의 파일이 있다면 어떤 확장자의 파일도 가져올 수 있게 합니다 */
    // "noResolve": true,                                /* import나 require로 파일 목록을 늘리지 않습니다 */

    /* 자바스크립트 파일 관련 설정 */
    // "allowJs": true,                                  /* 자바스크립트 파일도 같이 사용할 수 있게 합니다 */
    // "checkJs": true,                                  /* 자바스크립트 파일의 오류도 검사합니다 */
    // "maxNodeModuleJsDepth": 1,                        /* node_modules 안의 자바스크립트 파일을 어디까지 확인할지 정합니다 */

    /* 결과물 관련 설정 */
    // "declaration": true,                              /* 타입 정보 파일을 따로 만들어줍니다 */
    // "declarationMap": true,                           /* 타입 정보 파일에 대한 소스맵을 만듭니다 */
    // "emitDeclarationOnly": true,                      /* 타입 정보 파일만 만들고 자바스크립트 파일은 만들지 않습니다 */
    // "sourceMap": true,                                /* 원본 코드와 변환된 코드를 연결해주는 파일을 만듭니다 */
    // "inlineSourceMap": true,                          /* 변환된 파일 안에 소스맵을 직접 넣습니다 */
    // "outFile": "./",                                  /* 모든 파일을 하나로 합쳐서 저장할 위치를 지정합니다 */
    // "outDir": "./",                                   /* 변환된 파일들을 저장할 폴더를 지정합니다 */
    // "removeComments": true,                           /* 주석을 모두 지워서 파일 크기를 줄입니다 */
    // "noEmit": true,                                   /* 파일을 만들지 않고 타입 검사만 합니다 */
    // "importHelpers": true,                            /* 도우미 함수를 프로젝트당 한 번만 포함시킵니다 */
    // "downlevelIteration": true,                       /* 오래된 자바스크립트 환경에서도 반복문이 잘 작동하게 합니다 */
    // "sourceRoot": "",                                 /* 디버거가 원본 파일을 찾을 경로를 지정합니다 */
    // "mapRoot": "",                                    /* 디버거가 소스맵 파일을 찾을 경로를 지정합니다 */
    // "inlineSources": true,                            /* 소스맵에 원본 코드를 직접 포함시킵니다 */
    // "emitBOM": true,                                  /* 파일 맨 앞에 BOM 문자를 넣습니다 */
    // "newLine": "crlf",                                /* 줄바꿈 문자를 어떤 방식으로 할지 정합니다 */
    // "stripInternal": true,                            /* @internal이 붙은 코드의 타입 정보를 제외합니다 */
    // "noEmitHelpers": true,                            /* 도우미 함수를 직접 포함시키지 않습니다 */
    // "noEmitOnError": true,                            /* 오류가 있으면 파일을 만들지 않습니다 */
    // "preserveConstEnums": true,                       /* const enum을 일반 객체로 남겨둡니다 */
    // "declarationDir": "./",                           /* 타입 정보 파일을 저장할 폴더를 지정합니다 */

    /* 다른 형식의 모듈과 호환성 설정 */
    // "isolatedModules": true,                          /* 각 파일을 다른 파일과 독립적으로 처리할 수 있게 합니다 */
    // "verbatimModuleSyntax": true,                     /* 타입 전용이 아닌 import/export문을 모듈 설정에 맞게 그대로 유지합니다 */
    // "isolatedDeclarations": true,                     /* 다른 도구들이 타입 정의 파일을 쉽게 만들 수 있도록 내보내기에 충분한 정보를 요구합니다 */
    // "erasableSyntaxOnly": true,                       /* ECMAScript에 없는 문법 기능은 사용할 수 없게 합니다 */
    // "allowSyntheticDefaultImports": true,             /* default export가 없는 모듈도 default import로 가져올 수 있게 합니다 */
    "esModuleInterop": true,                             /* 다양한 방식으로 만들어진 모듈을 더 쉽게 가져다 쓸 수 있게 합니다 */
    // "preserveSymlinks": true,                         /* 심볼릭 링크를 그대로 사용합니다 */
    "forceConsistentCasingInFileNames": true,            /* 파일 이름의 대소문자를 정확하게 맞춰야 하게 합니다 */

    /* 코드 검사 설정 */
    "strict": true,                                      /* 코드를 더 엄격하게 검사해서 실수를 줄여줍니다 */
    // "noImplicitAny": true,                            /* 타입이 없는 변수를 허용하지 않습니다 */
    // "strictNullChecks": true,                         /* null과 undefined 값을 더 엄격하게 검사합니다 */
    // "strictFunctionTypes": true,                      /* 함수의 매개변수와 반환값 타입을 더 엄격하게 검사합니다 */
    // "strictBindCallApply": true,                      /* bind, call, apply 메서드의 인자를 정확하게 검사합니다 */
    // "strictPropertyInitialization": true,             /* 클래스의 속성이 생성자에서 초기화되었는지 검사합니다 */
    "strictBuiltinIteratorReturn": true,                 /* 내장 반복자의 반환 타입을 any 대신 undefined로 설정합니다 */
    // "noImplicitThis": true,                           /* this의 타입이 명확하지 않으면 오류를 발생시킵니다 */
    // "useUnknownInCatchVariables": true,               /* catch문의 오류 변수를 더 안전한 unknown 타입으로 설정합니다 */
    // "alwaysStrict": true,                             /* 항상 'use strict' 모드로 실행되게 합니다 */
    // "noUnusedLocals": true,                           /* 사용하지 않는 지역 변수가 있으면 오류를 발생시킵니다 */
    // "noUnusedParameters": true,                       /* 사용하지 않는 매개변수가 있으면 오류를 발생시킵니다 */
    // "exactOptionalPropertyTypes": true,               /* 선택적 속성의 타입을 더 정확하게 검사합니다 */
    // "noImplicitReturns": true,                        /* 함수의 모든 경로에서 반환값이 있는지 검사합니다 */
    // "noFallthroughCasesInSwitch": true,               /* switch문에서 break를 빼먹지 않았는지 검사합니다 */
    // "noUncheckedIndexedAccess": true,                 /* 배열이나 객체의 인덱스 접근을 더 안전하게 만듭니다 */
    // "noImplicitOverride": true,                       /* 부모 클래스의 메서드를 재정의할 때 override 키워드를 꼭 사용하게 합니다 */
    // "noPropertyAccessFromIndexSignature": true,       /* 객체의 속성 접근 방식을 일관되게 강제합니다 */
    // "allowUnusedLabels": true,                        /* 사용하지 않는 레이블을 허용합니다 */
    // "allowUnreachableCode": true,                     /* 도달할 수 없는 코드를 허용합니다 */

    /* 기타 설정 */
    // "skipDefaultLibCheck": true,                      /* 기본 라이브러리 파일의 타입 검사를 건너뜁니다 */
    "skipLibCheck": true                                 /* 라이브러리 파일의 타입 검사를 건너뛰어서 시간을 절약합니다 */
  },
  "include": ["workspace-ins/**/*"],
  "exclude": ["node_modules", "sample/**/*"]
}
